pipeline { 
    agent any
    
    tools {
        maven 'maven3'
        jdk 'jdk17'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }
    stages {
        stage('Git checkout') {
            steps {
            git branch:'main', url:'https://github.com/goudmanju/FullStack-Blogging-App.git'
            }
        }
        stage('complie') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Publish Artifacts') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-settings', jdk: 'jdk17', maven: 'maven3', traceability: true) {
                sh "mvn deploy"
                }
            }
        }
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        stage('Trivy') {
            steps {
                sh "trivy fs --format table -o fs.html ."
            }
        }
        stage('Sonaranalysis') {
            steps {
                withSonarQubeEnv('sonar-scanner') {
               sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=production-no1 -Dsonar.projectKey=production-no1 \
                      -Dsonar.java.binaries=target '''
                  }
            }
        }
        stage('Docker build & tag') {
            steps {
                script {
                 withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                   sh  'docker build -t manjugoud/productionno-1:latest .'
                   }
                }
            }
        }
            stage('Trivy image scan') {
            steps {
                sh "trivy image --format table -o image.html manjugoud/productionno-1 "
            }
        }
        stage('Docker push') {
            steps {
                script {
               // This step should not normally be used in your script. Consult the inline help for details.
                 withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                   sh  'docker push manjugoud/productionno-1:latest'
                   }
                }
            }
            }
        stage('K8-deploy') {
           steps {
            withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://47A67B79682CCDDF89EC6F73ED0143B2.gr7.us-east-1.eks.amazonaws.com') {
              sh 'kubectl apply -f deployment-service.yml'
              sleep 20
              }
            }
        }
        stage('verify-deployment') {
           steps {
            withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://47A67B79682CCDDF89EC6F73ED0143B2.gr7.us-east-1.eks.amazonaws.com') {
              sh 'kubectl get pods'
              sh 'kubectl get svc'
              }
            }
        }
        }
    }
